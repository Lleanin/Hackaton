import os
import random

import telebot
from dotenv import load_dotenv
from telebot import types


load_dotenv()
tg_bot_token = os.environ.get("TG_BOT_TOKEN")
bot = telebot.TeleBot(tg_bot_token)
score = 0


tasks_ru = ["–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —Ç–∏–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ Python?",
            "–ö–∞–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–∏—Ç –∫–æ–¥?:file_ext = filename.split('.')[-1]",
            "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–µ—Ç–æ–¥ append?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–ø–∏—Å–æ–∫?",
            "–ö–æ—Ä—Ç–µ–∂ —ç—Ç–æ –∏–∑–º–µ–Ω—è–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ—Ç?", 
            "–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å '\n'?",
            "–ì–¥–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–±—Ä–∞–Ω—ã import'—ã –ø–æ PEP8?",
            "Time-—ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞?",
            "–ö–∞–∫ –æ–±—ä—è–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é?",
            "–° –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è?",
            "–°–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ—Ä—Ç–µ–∂–µ?",
            "–ë—É–¥–µ—Ç –ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–¥?:\n class = '–û—Å–Ω–æ–≤—ã Python'\n print(class)",
            "–°–∫–æ–ª—å–∫–æ –±–∏–±–ª–∏–æ—Ç–µ–∫ –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç?",
            "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
            "–ö–∞–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—Ä–µ–º—è?",
            "–ö–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç —á—Ç–æ-–ª–∏–±–æ –≤ –∫–æ–Ω—Å–æ–ª—å?",
            "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–ø—É—Å–∫ –≤ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ : –ú–µ—Ç–æ–¥ _______ —É–º–µ–µ—Ç –∑–∞–º–µ–Ω—è—Ç—å –æ–¥–Ω—É —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –¥—Ä—É–≥—É—é.",
            "–° –ø–æ–º–æ—â—å—é –∫–∞–≤—ã—á–µ–∫ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å _______, \n –ø—Ä–∏–º–µ—Ä:'Devman'",
            "–°–ª–æ–≤–∞—Ä—å ‚Äì —ç—Ç–æ –æ–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–∞—Ä—ã –∫–ª—é—á-_______.",
            "–ú–µ—Ç–æ–¥ _______ —É–º–µ–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É.",
            "_______ ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–¥–∞—ë—Ç–µ —Ñ—É–Ω–∫—Ü–∏—è–º.",
            "–°–ø–∏—Å–∫–∏ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –ª—é–±–æ–≥–æ —Ç–∏–ø–∞: —á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏, —Å–ª–æ–≤–∞—Ä–∏, –¥—Ä—É–≥–∏–µ —Å–ø–∏—Å–∫–∏.",
            "–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –∫–æ–¥ –∏ –ø–æ–ª—É—á–∏–ª–∏ KeyError. –ö–∞–∫–æ–π –º–µ—Ç–æ–¥ —Å–ª–æ–≤–∞—Ä—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —Ç–∞–∫–æ–π –æ—à–∏–±–∫–∏ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å?",
            "–ï—Å—Ç—å –¥–≤–∞ –≤–∏–¥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: _______ –∏ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ.",
            "–§—É–Ω–∫—Ü–∏—è sorted –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.",
            "–ü–∞—Ä–æ–ª–∏, —Ç–æ–∫–µ–Ω—ã –∏ –ø—Ä–æ—á—É—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ ____-—Ñ–∞–π–ª.",
            "Python –ª—É—á—à–µ —á–µ–º Java?)",
            "–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try/except?",
            "–ì–¥–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–±—Ä–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ PEP8?",
            "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–µ—Ç–æ–¥ .upper()?",

        ]   


answers_ru = ["3",
            "splitext –∏–∑ –º–æ–¥—É–ª—è os.path",
            "–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫?",
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö","–ù–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π",
            "–ü–µ—Ä–µ–≤–æ–¥ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É",
            "–í –Ω–∞—á–∞–ª–µ –∫–æ–¥–∞",
            "–î–∞",
            "–ß–µ—Ä–µ–∑ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ def",
            "C 0",
            "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ",
            "–î–∞",
            "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ",
            "–ú–µ—Ç–æ–¥ input()",
            "time",
            "print()",
            ".replace()",
            "–°—Ç—Ä–æ–∫–∏",
            "–ó–Ω–∞—á–µ–Ω–∏–µ",
            ".format()",
            "–ê—Ä–≥—É–º–µ–Ω—Ç—ã",
            "–î–∞",
            ".get()",
            "–ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ",
            "–î–∞",
            ".env",
            "–î–ê",
            "–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π",
            "–ü–æ—Å–ª–µ import'–æ–≤",
            "–í–æ–∑—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—Å–µ –±—É–∫–≤—ã —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫ –±–æ–ª—å—à–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É"
            ]
 
    
@bot.message_handler(commands=['start'])
def start(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn_1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫!", reply_markup=markup)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_ru = types.KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π")
        btn_en = types.KeyboardButton('üá¨üáß English')
        markup.add(btn_ru, btn_en)
        bot.send_message(message.from_user.id, "üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / üá¨üáß Choose your language", reply_markup=markup)

    if message.text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–õ–µ–≥–∫–∏–π —Ä–µ–∂–∏–º(5 –í–æ–ø—Ä–æ—Å–æ–≤)")
        btn2 = types.KeyboardButton("–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∂–∏–º(15 –í–æ–ø—Ä–æ—Å–æ–≤)")
        btn3 = types.KeyboardButton("–¢—è–∂–µ–ª—ã–π —Ä–µ–∂–∏–º(30 –í–æ–ø—Ä–æ—Å–æ–≤)")
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–µ –∫–æ–ª-–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å:", reply_markup=markup)

    elif message.text == "–õ–µ–≥–∫–∏–π —Ä–µ–∂–∏–º(5 –í–æ–ø—Ä–æ—Å–æ–≤)":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        answers = []
        Button_1 = types.KeyboardButton("5")
        Button_2 = types.KeyboardButton(answers_ru[0])
        Button_3 = types.KeyboardButton("2")
        Button_4 = types.KeyboardButton("8")
        markup.add(Button_1, Button_2, Button_3, Button_4)
        bot.send_message(message.from_user.id, "1.{}:".format(tasks_ru[0]), reply_markup=markup)
        answers.append(Button_1,Button_2,Button_3,Button_4)

    if message.text == answers_ru[0]:
        score+=1

    elif message.text == answers:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        Button_1 = types.KeyboardButton("5")
        Button_2 = types.KeyboardButton(answers_ru[1])
        Button_3 = types.KeyboardButton("2")
        Button_4 = types.KeyboardButton("8")
        markup.add(Button_1, Button_2, Button_3, Button_4)
        bot.send_message(message.from_user.id, "2.{}:", reply_markup=markup).format(tasks_ru[1])

    elif message.text == "–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∂–∏–º(15 –í–æ–ø—Ä–æ—Å–æ–≤)":
        print("hello")
    elif message.text == "–¢—è–∂–µ–ª—ã–π —Ä–µ–∂–∏–º(30 –í–æ–ø—Ä–æ—Å–æ–≤)":
        print("hello")

    elif message.text == 'en English':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("Easy Mode (5 Questions)")
        btn2 = types.KeyboardButton("Medium Mode (15 Questions)")
        btn3 = types.KeyboardButton("Heavy Mode (30 Questions)")
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–µ –∫–æ–ª-–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å:", reply_markup=markup)
    

bot.polling(none_stop=True, interval=0)